// Возвращает структуру для доступа к переменным
//
// Параметры:
//  ТипМенеджера  - Тип, Строка - тип или строка описывающая тип, структуру значений которого требуется получить
//
// Возвращаемое значение:
//   Структура   - структура позволяющая в качестве ключа использовать имя переменной для получения её значения
//
Функция ПолучитьМенеджерПеременных(Знач ТипМенеджера) Экспорт

	Результат = Новый Структура;
	
	Если ТипЗнч(ТипМенеджера) = Тип("Строка") Тогда
		ТипМенеджера = Тип(ТипМенеджера);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип", ТипМенеджера);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	tss_gv_ЗначенияГлобальныхПеременных.Имя КАК Имя,
	|	tss_gv_ЗначенияГлобальныхПеременных.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.tss_gv_ЗначенияГлобальныхПеременных КАК tss_gv_ЗначенияГлобальныхПеременных
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(tss_gv_ЗначенияГлобальныхПеременных.Тип) = &Тип";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Имя, Выборка.Значение);
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ПолучитьМенеджерПеременных()

// Обновление состава переменных
//
Процедура АктуализироватьИменаПеременных() Экспорт

	// Сохранение текущих значений
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	tss_gv_ЗначенияГлобальныхПеременных.Тип КАК Тип,
	|	ТИПЗНАЧЕНИЯ(tss_gv_ЗначенияГлобальныхПеременных.Тип) КАК ТипЗначения,
	|	tss_gv_ЗначенияГлобальныхПеременных.Имя КАК Имя,
	|	tss_gv_ЗначенияГлобальныхПеременных.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.tss_gv_ЗначенияГлобальныхПеременных КАК tss_gv_ЗначенияГлобальныхПеременных
	|ИТОГИ ПО
	|	ТипЗначения";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Обновление переменных
	РегистрыСведений.tss_gv_ЗначенияГлобальныхПеременных.СоздатьНаборЗаписей().Записать();
	tss_gv_ГлобальныеПеременныеПереопределяемый.ИнициироватьПереченьПеременных();
	
	// Восстановление значений
	Пока Выборка.Следующий() Цикл
		ПеременныеМенеджер = ПолучитьМенеджерПеременных(Выборка.ТипЗначения);
		ВыборкаЗначений = Выборка.Выбрать();
		Пока ВыборкаЗначений.Следующий() Цикл
			Если Не ПеременныеМенеджер.Свойство(ВыборкаЗначений.Имя) Тогда
				Продолжить;
			КонецЕсли;
			МенеджерЗаписи = РегистрыСведений.tss_gv_ЗначенияГлобальныхПеременных.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Тип = ВыборкаЗначений.Тип;
			МенеджерЗаписи.Имя = ВыборкаЗначений.Имя;
			МенеджерЗаписи.Значение = ВыборкаЗначений.Значение;
			МенеджерЗаписи.Записать();
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры // ДобавитьПеременную()

// Добавление переменной в состав глобальных переменных
//
// Параметры:
//  Имя  - Строка - Имя переменной которое планируется использовать в коде
//                 для получения настроенного значения. Имя должно быть соответствовать
//                 общим правилам установки имён переменных
//  Тип  - Тип, Строка - тип или строка описывающая тип значения глобальной переменной
//
Процедура ДобавитьПеременную(Имя, Знач Тип) Экспорт

	// Проверка правильности имени переменной
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
		Сообщить("Ошибка: Имя переменной не может быть пустым", СтатусСообщения.Важное);
	    Возврат;
	КонецЕсли;
	Диапазоны = Новый Массив;
	ДиапазонЦифры = Новый Структура("Мин,Макс", 48, 57);			// цифры    
    Диапазоны.Добавить(ДиапазонЦифры);         
    Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90));		// латиница большие
    Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122));		// латиница маленькие
    Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103));	// кириллица
    Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025));	// символ "Ё"
    Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105));	// символ "ё"
    Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95));		// символ "_"
	КодПервогоСимвола = КодСимвола(Лев(Имя, 1));
	Если КодПервогоСимвола >= ДиапазонЦифры.Мин
		И КодПервогоСимвола <= ДиапазонЦифры.Макс Тогда
		Сообщить("Ошибка: Имя переменной не может начинаться с цифры " + Имя, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Для Позиция = 1 По СтрДлина(Имя) Цикл
		СимволДопустим = Ложь;
		КодСимвола = КодСимвола(Сред(Имя, Позиция, 1));
	 	Для каждого Диапазон Из Диапазоны Цикл
			Если КодСимвола >= Диапазон.Мин
				И КодСимвола <= Диапазон.Макс Тогда
				СимволДопустим = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не СимволДопустим Тогда
			Сообщить("Ошибка: Имя переменной содержит недопустимые символы " + Имя, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	// Добавление переменной
	ПеременныеМенеджер = ПолучитьМенеджерПеременных(Тип);
	Если НЕ ПеременныеМенеджер.Свойство(Имя) Тогда
		Если ТипЗнч(Тип) = Тип("Тип") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов,,,); 
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов(Тип,,,); 
		КонецЕсли; 
		
		МенеджерЗаписи = РегистрыСведений.tss_gv_ЗначенияГлобальныхПеременных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Тип = ОписаниеТипов.ПривестиЗначение(Неопределено);
		МенеджерЗаписи.Имя = Имя;
		МенеджерЗаписи.Значение = ОписаниеТипов.ПривестиЗначение(Неопределено);
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПеременную() 
 
  